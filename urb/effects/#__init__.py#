from random import randint, choice

from urb import imports

def refresh( context_name ):
    return imports.refresh(context_name)

def get( context_name ):
    return imports.get('effects', context_name)

class StatusEffect(object):

    name = None

    apply_msgs = []
    remove_msgs = []

    ticklimit = 0

    def __init__(self, app, source, move, target):
	self.app = app 
	self.source = source
	self.move = move 
	self.target = target
	self.apply()

    def apply(self):
        self.ticks = 0
	self.target.effects[self.name] = self
	self.app.fsay(choice(self.apply_msgs).format(p=self.source, m=self.move, t=self.target))

    def remove(self, silent=False):
	if self.name in self.target.effects:
	    del self.target.effects[self.name]
            if not silent:
                self.app.fsay(choice(self.remove_msgs).format(p=self.source, m=self.move, t=self.target))

    def tick(self):
        self.ticks += 1
        if self.ticks >= self.ticklimit:
            self.remove()

class ActiveEffect(StatusEffect):

    hit_msgs = []

    hitlimit = 0

    def __init__(self, app, source, move, target):
        super(ActiveEffect, self).__init__(app, source, move, target)
        
        self.hits = 0

    def on_hit(self):
        pass

    def on_death(self):
        pass

    def _on_death(self):
        self.on_death()
        death_msg = render(self.target.character.death_msg, self.target, self.source)
        self.app.fsay(death_msg)
        self.app.fsay("Death slaps a sticker on %s, \"Kaput!\" You're dead! [%d]" % (self.target, self.target.health))
        winid = self.app.game.check_win_condition()
        if winid != None:
            self.app.game.finish_battle(winid)            
        self.remove(silent=True)        

    def random_hit_msg(self, *args, **kwargs):
        default = {'t'=self.target, 'p'=self.source, 'm'=self.move}
        default.update(kwargs)
        msg = choice(self.hit_msgs).format(*args, **default)
	self.app.fsay(msg)

    def tick(self):
        self.ticks += 1
        if self.ticks % self.ticklimit == 0:
            if self.hits >= self.hitlimit:
                self.remove()
            else:
                self.hits += 1
                result = self.on_hit()
                if self.target.health <= 0:
                    self._on_death()
                elif result:    
                    self.random_hit_msg(**result)
